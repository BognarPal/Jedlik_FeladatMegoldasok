// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pizzeria.service;

namespace pizzeria.service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210830133718_AddAdminUser")]
    partial class AddAdminUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9");

            modelBuilder.Entity("pizzeria.service.models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FloorAndDoor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StreetAndHouseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("pizzeria.service.models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CookingStartTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerComment")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveredTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeliveringTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OrderTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("pizzeria.service.models.OrderDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("pizzeria.service.models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.ToTable("PizzaPicture");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaPizzaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PizzaId")
                        .HasColumnType("int");

                    b.Property<int?>("PizzaTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.HasIndex("PizzaTagId");

                    b.ToTable("PizzaPizzaTag");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PizzaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.ToTable("PizzaPrice");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PizzaTag");
                });

            modelBuilder.Entity("pizzeria.service.models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "courier"
                        });
                });

            modelBuilder.Entity("pizzeria.service.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("pizzeria.service.models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("pizzeria.service.models.Customer", b =>
                {
                    b.HasBaseType("pizzeria.service.models.User");

                    b.Property<int?>("PrimaryAddressId")
                        .HasColumnType("int");

                    b.HasIndex("PrimaryAddressId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("pizzeria.service.models.Employee", b =>
                {
                    b.HasBaseType("pizzeria.service.models.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@localhost.com",
                            Name = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvf3h9tFg/+as1/hx10qBWjXg0tYGISsTyyKKTAlE4+9HkiI6BuF8mqLM7HsoE52g==",
                            Phone = "112"
                        });
                });

            modelBuilder.Entity("pizzeria.service.models.Address", b =>
                {
                    b.HasOne("pizzeria.service.models.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("pizzeria.service.models.Order", b =>
                {
                    b.HasOne("pizzeria.service.models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("pizzeria.service.models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("pizzeria.service.models.OrderDetails", b =>
                {
                    b.HasOne("pizzeria.service.models.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("pizzeria.service.models.Pizza", "Pizza")
                        .WithMany()
                        .HasForeignKey("PizzaId");

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaPicture", b =>
                {
                    b.HasOne("pizzeria.service.models.Pizza", null)
                        .WithMany("Pictures")
                        .HasForeignKey("PizzaId");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaPizzaTag", b =>
                {
                    b.HasOne("pizzeria.service.models.Pizza", "Pizza")
                        .WithMany("PizzaPizzaTags")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pizzeria.service.models.PizzaTag", "PizzaTag")
                        .WithMany()
                        .HasForeignKey("PizzaTagId");

                    b.Navigation("Pizza");

                    b.Navigation("PizzaTag");
                });

            modelBuilder.Entity("pizzeria.service.models.PizzaPrice", b =>
                {
                    b.HasOne("pizzeria.service.models.Pizza", null)
                        .WithMany("Prices")
                        .HasForeignKey("PizzaId");
                });

            modelBuilder.Entity("pizzeria.service.models.UserRole", b =>
                {
                    b.HasOne("pizzeria.service.models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("pizzeria.service.models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pizzeria.service.models.Customer", b =>
                {
                    b.HasOne("pizzeria.service.models.Address", "PrimaryAddress")
                        .WithMany()
                        .HasForeignKey("PrimaryAddressId");

                    b.Navigation("PrimaryAddress");
                });

            modelBuilder.Entity("pizzeria.service.models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("pizzeria.service.models.Pizza", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("PizzaPizzaTags");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("pizzeria.service.models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("pizzeria.service.models.Customer", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
